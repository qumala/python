#!/usr/bin/env python3

# Copyright 2010 Google Inc.
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0
# Google's Python Class
# http://code.google.com/edu/languages/google-python-class/
# Перевод, дополнения Максимов Л.В. © 2016
 
# Строки
 
# Заполните код приведенных ниже функций. Функция main() уже настроена
# для вызова функций с несколькими различными параметрами,
# и выводит 'OK' в случае, если вызов функции корректен.
# Начальный код каждой функции содержит только 'return'
# и является просто заготовкой для вашего кода.
  
 
# A. Пончики
# Дано количество пончиков n (целое число);
# Нужно вернуть строку вида 'Количество пончиков: <n>', 
# где n это количество, переданное в функцию как параметр.
# Однако, если количество составляет 10 и более, вместо 
# текущего количества нужно использовать слово 'много'.
# Таким образом, donuts(5) вернет 'Количество пончиков: 5'
# а donuts(23) - 'Количество пончиков: много'
def donuts(n):
    # +++ ваш код +++
    return 'Количество пончиков: ' + [str(n),'много'][n>=10];
 
 
# B. Начало и конец
# Дана строка s.
# Верните строку, состоящую из первых 2
# и последних 2 символов исходной строки.
# Таким образом, из строки 'spring' получится 'spng'.
# Однако, если длина строки меньше, чем 2 -
# верните просто пустую строчку.
def both_ends(s):
    # +++ ваш код +++
    if len(s)<2:
    	return ''
    else:
    	return s[0]+s[1]+s[-2]+s[-1];
 
 
# C. Кроме первого
# Дана строка s.
# Верните строку, в которой все вхождения ее первого символа
# заменены на '*', за исключением самого этого первого символа.
# Например, из 'babble' должно получиться 'ba**le'.
# Предполагается, что длина строки 1 и более.
# Подсказка: s.replace(stra, strb) вернет версию строки,
# в которой все вхождения stra будут заменены на strb.
def fix_start(s):
    # +++ ваш код +++
    #s_=s[0];
    return s[0]+s[1:].replace(s[0], '*');
    #return s[0]+s.replace(s[0], '*')[1:];
   #return s;
 

# D. Перемешивание
# Даны строки a и b.
# Верните одну строку, в которой a и b отделены пробелом '<a> <b>',
# и поменяйте местами первые 2 символа каждой строки.
# Например:
#   'mix', 'pod' -> 'pox mid'
#   'dog', 'dinner' -> 'dig donner'
# Предполагается, что строки a и b имеют длину 2 и более символов.
def mix_up(a, b):    
    # +++ ваш код +++
    return b[0:2]+a[2:]+' '+a[0:2]+b[2:];


 

# Функция test() используется в main() для сравнения того, 
# что возвращает функция, с тем, что она должна возвращать.
def test(got, expected):
    if got == expected:
        prefix = ' OK '
    else:
        prefix = '  X '
    print('%s Получено: %s | Ожидалось: %s' % (prefix, repr(got), repr(expected)))
 
 
# Вызывает определенные выше функции с тестовыми параметрами.
def main():
    print('Пончики')
    # Каждая строка вызывает donuts() и сравнивает возвращаемое значение с ожидаемым.
    test(donuts(4), 'Количество пончиков: 4')
    test(donuts(9), 'Количество пончиков: 9')
    test(donuts(10), 'Количество пончиков: много')
    test(donuts(99), 'Количество пончиков: много')
 
    print()
    print('Начало и конец')
    test(both_ends('spring'), 'spng')
    test(both_ends('Hello'), 'Helo')
    test(both_ends('a'), '')
    test(both_ends('xyz'), 'xyyz')
 
    print()
    print('Кроме первого')
    test(fix_start('являющаяся'), 'явл*юща*с*')
    test(fix_start('обоюдоострое'), 'об*юд**стр*е')
    test(fix_start('незаконнорожденный'), 'незако**орожде**ый')
    test(fix_start('инквизиции'), 'инкв*зиц**')
 
    print()
    print('Перемешивание')
    test(mix_up('да', 'нет'), 'не дат')
    test(mix_up('чёрное', 'зеркало'), 'зерное чёркало')
    test(mix_up('курить', 'папирус'), 'парить купирус')
    test(mix_up('караканский', 'бор'), 'бораканский кар')
 
 
# Стандартный шаблон для вызова функции main().
if __name__ == '__main__':
    main()
